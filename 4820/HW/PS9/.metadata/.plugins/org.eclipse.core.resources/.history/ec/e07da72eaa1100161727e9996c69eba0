import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.Arrays;

public class Framework {
    int n;
    int v[];
    int w[];
    int W;
    boolean picked[];
    void input(String input_name){
        File file = new File(input_name);
        BufferedReader reader = null;

        try {
            reader = new BufferedReader(new FileReader(file));

            String text = reader.readLine();
            String parts[];
            parts=text.split(" ");
            n=Integer.parseInt(parts[0]);
            W=Integer.parseInt(parts[1]);
            v=new int[n];
            w=new int[n];
            picked=new boolean[n];
            for (int i=0;i<n;i++){
                text=reader.readLine();
                parts=text.split(" ");
                v[i]=Integer.parseInt(parts[0]);
                w[i]=Integer.parseInt(parts[1]);
            }
            reader.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //writing the output
    void output(String output_name)
    {
        try{
            PrintWriter writer = new PrintWriter(output_name, "UTF-8");

            int total_v=0;
            for (int i=0;i<n;i++)
              if (picked[i])
                total_v += v[i];
            writer.println(total_v);
            for (int i=0;i<n;i++)
              if (picked[i])
                writer.println("1");
              else 
                writer.println("0");

            writer.close();
        }catch(Exception e){
            e.printStackTrace();
        }
    }

    public Framework(String []Args){
        input(Args[0]);
        // choose be decreasing weight density
        
        boolean[] pickVal = new boolean[n];
        boolean[] pickDensity = new boolean[n];
        
        // Initialize picked array //
        for (int p = 0; p < n; p++) {
        	picked[p] = false;
        	pickVal[p] = false;
        	pickDensity[p] = false;
        }
        
        
        int maxValue = -1;
        double maxDensity = -1;
        int maxValInd = -1;
        int maxDenInd = -1;
        int newDenWeight, newValWeight;
        
        while (W > 0) {
        	for (int i = 0; i < n; i++) {
        		if (v[i] > maxValue && pickVal[i] != true) {
        			maxValInd = i;
        			maxValue = v[i];
        		}
        		double den = (double)(v[i])/w[i];
        		if (den > maxDensity && pickDensity[i] != true) {
        			maxDenInd = i;
        			maxDensity = den;
        		}
        	}
//        	pickVal[maxValInd] = true;
//        	pickDensity[maxDenInd] = true;
        	newDenWeight = W - w[maxValInd];
        	newValWeight = W - w[maxDenInd];

        	if (maxDensity >= maxValue && newDenWeight > 0) {
        		System.out.println("IN MAX DEN");
        		picked[maxDenInd] = true;
        		pickDensity[maxDenInd] = true;
        		W = newDenWeight;
        	}
        	else if (maxDensity < maxValue && newValWeight > 0) {
        		System.out.println("IN MAX VAL");
        		pickVal[maxValInd] = true;
        		picked[maxValInd] = true;
        		W = newValWeight;
        	}
        	System.out.println(W);
        }
        

        output(Args[1]);
    }

    public static void main(String [] Args) //Strings in Args are the name of the input file followed by the name of the output file
    {
        new Framework(Args);
    }
}
