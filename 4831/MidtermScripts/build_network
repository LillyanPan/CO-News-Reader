# NOTES
# 	FLAG: 16 (2 colm) SEQ reversed complemented
# 	FLAG: 4 (2 colm) segment unmapped
from sys import argv
import os

script, data_read, fileR1, fileR2 = argv

os.system("bwa index " + data_read)
os.system("bwa bwasw " + data_read + " " + fileR1 + " > out1.sam")
os.system("bwa bwasw " + data_read + " " + fileR2 +" > out2.sam")

######### Read through all Reads in each file ######### 
data1 = [l.strip() for i, l in
enumerate(open('/home/local/CORNELL/ldp54/midterm/out1.sam')) if 'read' in l]

data2 = [l.strip() for i, l in
enumerate(open('/home/local/CORNELL/ldp54/midterm/out2.sam')) if 'read' in l]

# Creates dictionary key: int, value: array of bwa output; each column is an array element
dict1 = {}
dict2 = {}

key = 0
for line in data1:
    line = line.strip().split('\t')
    # Ignore read if sequence is unmapped
    if (line[1] == '4'): continue
    else :
    	dict1[key] = line
    	key += 1

key = 0
for line in data2:
    line = line.strip().split('\t')
    # Ignore read if sequence is unmapped
    if (line[1] == '4'): continue
    else :
    	dict2[key] = line
    	key += 1

#########  Look at read with same ID in 2 files ######### 
# WRONG what does same ID mean?
matches = []
realMatches = []
for key1, value1 in dict1.iteritems():
	for key2, value2 in dict2.iteritems():
		# If QUERY NAME are the same, they are a match
		# Append array pair of keys to matches
		if (value1[0] == value2[0]):
			matches.append([key1,key2])

#########  Determine if succesfully mapped to genes ######### 
# Already done above by checking if line[1] == '4'
# Implies sequence is unmapped

#########  Determine which genes mapped to #########
# mappedTo is an array of pairs of ref seq Names that correlate to matches
mappedTo = []
for m in matches:
	val1 = dict1[m[0]]
	val2 = dict2[m[1]]

#########  Determine if paired reads have different orientations ######### 
	if (val1[1] == '16' and val2[1] != '16') or (val1[1] != '16' and val2[1] == '16'):
		realMatches.append(m)

		#  Get reference sequence NAME
		seq1 = val1[2]
		seq2 = val2[2]
		mappedTo.append([seq1, seq2])

#########  Pairs that pass all constraints #########  
# Column 1: Gene 1
# Column 2: Gene 2
# Column 3: Number of interactions

output_file = open('dmNet.txt', 'w')

final = {}

for m in mappedTo:
	# final[(m[0], m[1])] = 0
	if (m[0], m[1]) in final or (m[1], m[0]) in final:
		if (m[1], m[0]) in final:
			final[(m[1], m[0])] += 1
		else: final[(m[0], m[1])] += 1
		# final[(m[0], m[1])] += 1
	else:
		final[(m[0], m[1])] = 1

for pp in sorted(final.iteritems(), key=lambda (k,v): (-v,k)):
	print([pp[0][0], pp[0][1], pp[1]])
	output_file.write('%s\t%s\t%s\n' %(pp[0][0], pp[0][1], pp[1]))

output_file.close()



